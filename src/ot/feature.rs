// https://docs.microsoft.com/en-us/typography/opentype/spec/featurelist

#![allow(dead_code)]

use crate::hb_tag_t;

// `Character Variants N` and `Stylistic Set N` are excluded.

pub const ACCESS_ALL_ALTERNATES: hb_tag_t = hb_tag_t::from_bytes(b"aalt");
pub const ABOVE_BASE_FORMS: hb_tag_t = hb_tag_t::from_bytes(b"abvf");
pub const ABOVE_BASE_MARK_POSITIONING: hb_tag_t = hb_tag_t::from_bytes(b"abvm");
pub const ABOVE_BASE_SUBSTITUTIONS: hb_tag_t = hb_tag_t::from_bytes(b"abvs");
pub const ALTERNATIVE_FRACTIONS: hb_tag_t = hb_tag_t::from_bytes(b"afrc");
pub const AKHANDS: hb_tag_t = hb_tag_t::from_bytes(b"akhn");
pub const BELOW_BASE_FORMS: hb_tag_t = hb_tag_t::from_bytes(b"blwf");
pub const BELOW_BASE_MARK_POSITIONING: hb_tag_t = hb_tag_t::from_bytes(b"blwm");
pub const BELOW_BASE_SUBSTITUTIONS: hb_tag_t = hb_tag_t::from_bytes(b"blws");
pub const CONTEXTUAL_ALTERNATES: hb_tag_t = hb_tag_t::from_bytes(b"calt");
pub const CASE_SENSITIVE_FORMS: hb_tag_t = hb_tag_t::from_bytes(b"case");
pub const GLYPH_COMPOSITION_DECOMPOSITION: hb_tag_t = hb_tag_t::from_bytes(b"ccmp");
pub const CONJUNCT_FORM_AFTER_RO: hb_tag_t = hb_tag_t::from_bytes(b"cfar");
pub const CONJUNCT_FORMS: hb_tag_t = hb_tag_t::from_bytes(b"cjct");
pub const CONTEXTUAL_LIGATURES: hb_tag_t = hb_tag_t::from_bytes(b"clig");
pub const CENTERED_CJK_PUNCTUATION: hb_tag_t = hb_tag_t::from_bytes(b"cpct");
pub const CAPITAL_SPACING: hb_tag_t = hb_tag_t::from_bytes(b"cpsp");
pub const CONTEXTUAL_SWASH: hb_tag_t = hb_tag_t::from_bytes(b"cswh");
pub const CURSIVE_POSITIONING: hb_tag_t = hb_tag_t::from_bytes(b"curs");
pub const PETITE_CAPITALS_FROM_CAPITALS: hb_tag_t = hb_tag_t::from_bytes(b"c2pc");
pub const SMALL_CAPITALS_FROM_CAPITALS: hb_tag_t = hb_tag_t::from_bytes(b"c2sc");
pub const DISTANCES: hb_tag_t = hb_tag_t::from_bytes(b"dist");
pub const DISCRETIONARY_LIGATURES: hb_tag_t = hb_tag_t::from_bytes(b"dlig");
pub const DENOMINATORS: hb_tag_t = hb_tag_t::from_bytes(b"dnom");
pub const DOTLESS_FORMS: hb_tag_t = hb_tag_t::from_bytes(b"dtls");
pub const EXPERT_FORMS: hb_tag_t = hb_tag_t::from_bytes(b"expt");
pub const FINAL_GLYPH_ON_LINE_ALTERNATES: hb_tag_t = hb_tag_t::from_bytes(b"falt");
pub const TERMINAL_FORMS_1: hb_tag_t = hb_tag_t::from_bytes(b"fina");
pub const TERMINAL_FORMS_2: hb_tag_t = hb_tag_t::from_bytes(b"fin2");
pub const TERMINAL_FORMS_3: hb_tag_t = hb_tag_t::from_bytes(b"fin3");
pub const FLATTENED_ACCENT_FORMS: hb_tag_t = hb_tag_t::from_bytes(b"flac");
pub const FRACTIONS: hb_tag_t = hb_tag_t::from_bytes(b"frac");
pub const FULL_WIDTHS: hb_tag_t = hb_tag_t::from_bytes(b"fwid");
pub const HALF_FORMS: hb_tag_t = hb_tag_t::from_bytes(b"half");
pub const HALANT_FORMS: hb_tag_t = hb_tag_t::from_bytes(b"haln");
pub const ALTERNATE_HALF_WIDTHS: hb_tag_t = hb_tag_t::from_bytes(b"halt");
pub const HISTORICAL_FORMS: hb_tag_t = hb_tag_t::from_bytes(b"hist");
pub const HORIZONTAL_KANA_ALTERNATES: hb_tag_t = hb_tag_t::from_bytes(b"hkna");
pub const HISTORICAL_LIGATURES: hb_tag_t = hb_tag_t::from_bytes(b"hlig");
pub const HANGUL: hb_tag_t = hb_tag_t::from_bytes(b"hngl");
pub const HOJO_KANJI_FORMS: hb_tag_t = hb_tag_t::from_bytes(b"hojo");
pub const HALF_WIDTHS: hb_tag_t = hb_tag_t::from_bytes(b"hwid");
pub const INITIAL_FORMS: hb_tag_t = hb_tag_t::from_bytes(b"init");
pub const ISOLATED_FORMS: hb_tag_t = hb_tag_t::from_bytes(b"isol");
pub const ITALICS: hb_tag_t = hb_tag_t::from_bytes(b"ital");
pub const JUSTIFICATION_ALTERNATES: hb_tag_t = hb_tag_t::from_bytes(b"jalt");
pub const JIS_78_FORMS: hb_tag_t = hb_tag_t::from_bytes(b"jp78");
pub const JIS_83_FORMS: hb_tag_t = hb_tag_t::from_bytes(b"jp83");
pub const JIS_90_FORMS: hb_tag_t = hb_tag_t::from_bytes(b"jp90");
pub const JIS_2004_FORMS: hb_tag_t = hb_tag_t::from_bytes(b"jp04");
pub const KERNING: hb_tag_t = hb_tag_t::from_bytes(b"kern");
pub const LEFT_BOUNDS: hb_tag_t = hb_tag_t::from_bytes(b"lfbd");
pub const STANDARD_LIGATURES: hb_tag_t = hb_tag_t::from_bytes(b"liga");
pub const LEADING_JAMO_FORMS: hb_tag_t = hb_tag_t::from_bytes(b"ljmo");
pub const LINING_FIGURES: hb_tag_t = hb_tag_t::from_bytes(b"lnum");
pub const LOCALIZED_FORMS: hb_tag_t = hb_tag_t::from_bytes(b"locl");
pub const LEFT_TO_RIGHT_ALTERNATES: hb_tag_t = hb_tag_t::from_bytes(b"ltra");
pub const LEFT_TO_RIGHT_MIRRORED_FORMS: hb_tag_t = hb_tag_t::from_bytes(b"ltrm");
pub const MARK_POSITIONING: hb_tag_t = hb_tag_t::from_bytes(b"mark");
pub const MEDIAL_FORMS_1: hb_tag_t = hb_tag_t::from_bytes(b"medi");
pub const MEDIAL_FORMS_2: hb_tag_t = hb_tag_t::from_bytes(b"med2");
pub const MATHEMATICAL_GREEK: hb_tag_t = hb_tag_t::from_bytes(b"mgrk");
pub const MARK_TO_MARK_POSITIONING: hb_tag_t = hb_tag_t::from_bytes(b"mkmk");
pub const MARK_POSITIONING_VIA_SUBSTITUTION: hb_tag_t = hb_tag_t::from_bytes(b"mset");
pub const ALTERNATE_ANNOTATION_FORMS: hb_tag_t = hb_tag_t::from_bytes(b"nalt");
pub const NLC_KANJI_FORMS: hb_tag_t = hb_tag_t::from_bytes(b"nlck");
pub const NUKTA_FORMS: hb_tag_t = hb_tag_t::from_bytes(b"nukt");
pub const NUMERATORS: hb_tag_t = hb_tag_t::from_bytes(b"numr");
pub const OLDSTYLE_FIGURES: hb_tag_t = hb_tag_t::from_bytes(b"onum");
pub const OPTICAL_BOUNDS: hb_tag_t = hb_tag_t::from_bytes(b"opbd");
pub const ORDINALS: hb_tag_t = hb_tag_t::from_bytes(b"ordn");
pub const ORNAMENTS: hb_tag_t = hb_tag_t::from_bytes(b"ornm");
pub const PROPORTIONAL_ALTERNATE_WIDTHS: hb_tag_t = hb_tag_t::from_bytes(b"palt");
pub const PETITE_CAPITALS: hb_tag_t = hb_tag_t::from_bytes(b"pcap");
pub const PROPORTIONAL_KANA: hb_tag_t = hb_tag_t::from_bytes(b"pkna");
pub const PROPORTIONAL_FIGURES: hb_tag_t = hb_tag_t::from_bytes(b"pnum");
pub const PRE_BASE_FORMS: hb_tag_t = hb_tag_t::from_bytes(b"pref");
pub const PRE_BASE_SUBSTITUTIONS: hb_tag_t = hb_tag_t::from_bytes(b"pres");
pub const POST_BASE_FORMS: hb_tag_t = hb_tag_t::from_bytes(b"pstf");
pub const POST_BASE_SUBSTITUTIONS: hb_tag_t = hb_tag_t::from_bytes(b"psts");
pub const PROPORTIONAL_WIDTHS: hb_tag_t = hb_tag_t::from_bytes(b"pwid");
pub const QUARTER_WIDTHS: hb_tag_t = hb_tag_t::from_bytes(b"qwid");
pub const RANDOMIZE: hb_tag_t = hb_tag_t::from_bytes(b"rand");
pub const REQUIRED_CONTEXTUAL_ALTERNATES: hb_tag_t = hb_tag_t::from_bytes(b"rclt");
pub const RAKAR_FORMS: hb_tag_t = hb_tag_t::from_bytes(b"rkrf");
pub const REQUIRED_LIGATURES: hb_tag_t = hb_tag_t::from_bytes(b"rlig");
pub const REPH_FORMS: hb_tag_t = hb_tag_t::from_bytes(b"rphf");
pub const RIGHT_BOUNDS: hb_tag_t = hb_tag_t::from_bytes(b"rtbd");
pub const RIGHT_TO_LEFT_ALTERNATES: hb_tag_t = hb_tag_t::from_bytes(b"rtla");
pub const RIGHT_TO_LEFT_MIRRORED_FORMS: hb_tag_t = hb_tag_t::from_bytes(b"rtlm");
pub const RUBY_NOTATION_FORMS: hb_tag_t = hb_tag_t::from_bytes(b"ruby");
pub const REQUIRED_VARIATION_ALTERNATES: hb_tag_t = hb_tag_t::from_bytes(b"rvrn");
pub const STYLISTIC_ALTERNATES: hb_tag_t = hb_tag_t::from_bytes(b"salt");
pub const SCIENTIFIC_INFERIORS: hb_tag_t = hb_tag_t::from_bytes(b"sinf");
pub const OPTICAL_SIZE: hb_tag_t = hb_tag_t::from_bytes(b"size");
pub const SMALL_CAPITALS: hb_tag_t = hb_tag_t::from_bytes(b"smcp");
pub const SIMPLIFIED_FORMS: hb_tag_t = hb_tag_t::from_bytes(b"smpl");
pub const MATH_SCRIPT_STYLE_ALTERNATES: hb_tag_t = hb_tag_t::from_bytes(b"ssty");
pub const STRETCHING_GLYPH_DECOMPOSITION: hb_tag_t = hb_tag_t::from_bytes(b"stch");
pub const SUBSCRIPT: hb_tag_t = hb_tag_t::from_bytes(b"subs");
pub const SUPERSCRIPT: hb_tag_t = hb_tag_t::from_bytes(b"sups");
pub const SWASH: hb_tag_t = hb_tag_t::from_bytes(b"swsh");
pub const TITLING: hb_tag_t = hb_tag_t::from_bytes(b"titl");
pub const TRAILING_JAMO_FORMS: hb_tag_t = hb_tag_t::from_bytes(b"tjmo");
pub const TRADITIONAL_NAME_FORMS: hb_tag_t = hb_tag_t::from_bytes(b"tnam");
pub const TABULAR_FIGURES: hb_tag_t = hb_tag_t::from_bytes(b"tnum");
pub const TRADITIONAL_FORMS: hb_tag_t = hb_tag_t::from_bytes(b"trad");
pub const THIRD_WIDTHS: hb_tag_t = hb_tag_t::from_bytes(b"twid");
pub const UNICASE: hb_tag_t = hb_tag_t::from_bytes(b"unic");
pub const ALTERNATE_VERTICAL_METRICS: hb_tag_t = hb_tag_t::from_bytes(b"valt");
pub const VATTU_VARIANTS: hb_tag_t = hb_tag_t::from_bytes(b"vatu");
pub const VERTICAL_WRITING: hb_tag_t = hb_tag_t::from_bytes(b"vert");
pub const ALTERNATE_VERTICAL_HALF_METRICS: hb_tag_t = hb_tag_t::from_bytes(b"vhal");
pub const VOWEL_JAMO_FORMS: hb_tag_t = hb_tag_t::from_bytes(b"vjmo");
pub const VERTICAL_KANA_ALTERNATES: hb_tag_t = hb_tag_t::from_bytes(b"vkna");
pub const VERTICAL_KERNING: hb_tag_t = hb_tag_t::from_bytes(b"vkrn");
pub const PROPORTIONAL_ALTERNATE_VERTICAL_METRICS: hb_tag_t = hb_tag_t::from_bytes(b"vpal");
pub const VERTICAL_ALTERNATES_AND_ROTATION: hb_tag_t = hb_tag_t::from_bytes(b"vrt2");
pub const VERTICAL_ALTERNATES_FOR_ROTATION: hb_tag_t = hb_tag_t::from_bytes(b"vrtr");
pub const SLASHED_ZERO: hb_tag_t = hb_tag_t::from_bytes(b"zero");
