#![allow(
    dead_code,
    non_upper_case_globals,
    unused_assignments,
    unused_parens,
    while_true,
    clippy::assign_op_pattern,
    clippy::collapsible_if,
    clippy::comparison_chain,
    clippy::double_parens,
    clippy::unnecessary_cast,
    clippy::single_match,
    clippy::never_loop
)]

use crate::buffer::Buffer;

static _use_syllable_machine_trans_keys: [u8; 150] = [
    6, 36, 1, 8, 1, 1, 6, 36, 1, 1, 0, 36, 11, 11, 5, 36, 5, 36, 1, 8, 1, 1, 5, 36, 12, 36, 13, 36,
    14, 35, 15, 35, 16, 35, 33, 34, 34, 34, 14, 36, 14, 36, 14, 36, 1, 1, 14, 36, 13, 36, 13, 36,
    13, 36, 12, 36, 12, 36, 12, 36, 12, 36, 5, 36, 1, 36, 5, 36, 7, 11, 3, 3, 7, 7, 5, 36, 5, 36,
    29, 30, 30, 30, 5, 36, 5, 36, 12, 36, 13, 36, 14, 35, 15, 35, 16, 35, 33, 34, 34, 34, 14, 36,
    14, 36, 14, 36, 14, 36, 13, 36, 13, 36, 13, 36, 12, 36, 12, 36, 12, 36, 12, 36, 5, 36, 1, 36,
    1, 8, 3, 3, 7, 11, 7, 7, 6, 36, 1, 36, 5, 36, 29, 30, 30, 30, 11, 30, 1, 4, 0, 0,
];
static _use_syllable_machine_char_class: [i8; 51] = [
    0, 1, 2, 0, 3, 4, 2, 2, 2, 2, 2, 5, 6, 7, 2, 8, 0, 0, 9, 10, 2, 11, 12, 13, 14, 15, 16, 17, 18,
    19, 20, 21, 22, 23, 24, 25, 2, 26, 27, 28, 2, 29, 30, 31, 32, 33, 34, 35, 36, 0, 0,
];
static _use_syllable_machine_index_offsets: [i16; 76] = [
    0, 31, 39, 40, 71, 72, 109, 110, 142, 174, 182, 183, 215, 240, 264, 286, 307, 327, 329, 330,
    353, 376, 399, 400, 423, 447, 471, 495, 520, 545, 570, 595, 627, 663, 695, 700, 701, 702, 734,
    766, 768, 769, 801, 833, 858, 882, 904, 925, 945, 947, 948, 971, 994, 1017, 1040, 1064, 1088,
    1112, 1137, 1162, 1187, 1212, 1244, 1280, 1288, 1289, 1294, 1295, 1326, 1362, 1394, 1396, 1397,
    1417, 0, 0,
];
static _use_syllable_machine_indices: [i8; 1423] = [
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 3,
    2, 2, 2, 2, 2, 2, 4, 3, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 6, 5, 5, 5, 6, 7, 9, 10, 11, 12, 13, 3, 14, 15, 16, 17, 18, 11, 19, 20, 21, 22, 23, 24,
    25, 19, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 14, 43, 45, 1, 44, 46,
    44, 44, 47, 48, 49, 50, 51, 52, 53, 54, 48, 55, 47, 56, 57, 58, 59, 60, 61, 62, 44, 44, 44, 63,
    64, 65, 66, 1, 45, 1, 44, 46, 44, 44, 67, 48, 49, 50, 51, 52, 53, 54, 48, 55, 56, 56, 57, 58,
    59, 60, 61, 62, 44, 44, 44, 63, 64, 65, 66, 1, 45, 68, 68, 68, 68, 68, 68, 69, 45, 45, 1, 44,
    46, 44, 44, 44, 48, 49, 50, 51, 52, 53, 54, 48, 55, 56, 56, 57, 58, 59, 60, 61, 62, 44, 44, 44,
    63, 64, 65, 66, 1, 48, 49, 50, 51, 52, 44, 44, 44, 44, 44, 44, 57, 58, 59, 60, 61, 62, 44, 44,
    44, 49, 64, 65, 66, 70, 49, 50, 51, 52, 44, 44, 44, 44, 44, 44, 44, 44, 44, 60, 61, 62, 44, 44,
    44, 44, 64, 65, 66, 70, 50, 51, 52, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
    44, 64, 65, 66, 51, 52, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 64, 65,
    66, 52, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 64, 65, 66, 64, 65, 65,
    50, 51, 52, 44, 44, 44, 44, 44, 44, 44, 44, 44, 60, 61, 62, 44, 44, 44, 44, 64, 65, 66, 70, 50,
    51, 52, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 61, 62, 44, 44, 44, 44, 64, 65, 66, 70, 50, 51,
    52, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 62, 44, 44, 44, 44, 64, 65, 66, 70, 72, 50, 51,
    52, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 64, 65, 66, 70, 49, 50, 51,
    52, 44, 44, 44, 44, 44, 44, 57, 58, 59, 60, 61, 62, 44, 44, 44, 49, 64, 65, 66, 70, 49, 50, 51,
    52, 44, 44, 44, 44, 44, 44, 44, 58, 59, 60, 61, 62, 44, 44, 44, 49, 64, 65, 66, 70, 49, 50, 51,
    52, 44, 44, 44, 44, 44, 44, 44, 44, 59, 60, 61, 62, 44, 44, 44, 49, 64, 65, 66, 70, 48, 49, 50,
    51, 52, 44, 54, 48, 44, 44, 44, 57, 58, 59, 60, 61, 62, 44, 44, 44, 49, 64, 65, 66, 70, 48, 49,
    50, 51, 52, 44, 73, 48, 44, 44, 44, 57, 58, 59, 60, 61, 62, 44, 44, 44, 49, 64, 65, 66, 70, 48,
    49, 50, 51, 52, 44, 44, 48, 44, 44, 44, 57, 58, 59, 60, 61, 62, 44, 44, 44, 49, 64, 65, 66, 70,
    48, 49, 50, 51, 52, 53, 54, 48, 44, 44, 44, 57, 58, 59, 60, 61, 62, 44, 44, 44, 49, 64, 65, 66,
    70, 45, 1, 44, 46, 44, 44, 44, 48, 49, 50, 51, 52, 53, 54, 48, 55, 44, 56, 57, 58, 59, 60, 61,
    62, 44, 44, 44, 63, 64, 65, 66, 1, 45, 68, 68, 68, 68, 68, 68, 69, 68, 68, 68, 68, 49, 50, 51,
    52, 68, 68, 68, 68, 68, 68, 68, 68, 68, 60, 61, 62, 68, 68, 68, 68, 64, 65, 66, 70, 45, 1, 44,
    46, 44, 44, 44, 48, 49, 50, 51, 52, 53, 54, 48, 55, 47, 56, 57, 58, 59, 60, 61, 62, 44, 44, 44,
    63, 64, 65, 66, 1, 75, 74, 74, 74, 76, 12, 75, 45, 1, 44, 46, 44, 44, 78, 48, 49, 50, 51, 52,
    53, 54, 48, 55, 47, 56, 57, 58, 59, 60, 61, 62, 79, 80, 44, 63, 64, 65, 66, 1, 45, 1, 44, 46,
    44, 44, 44, 48, 49, 50, 51, 52, 53, 54, 48, 55, 47, 56, 57, 58, 59, 60, 61, 62, 79, 80, 44, 63,
    64, 65, 66, 1, 79, 80, 80, 3, 6, 82, 83, 82, 82, 84, 19, 20, 21, 22, 23, 24, 25, 19, 26, 28,
    28, 29, 30, 31, 32, 33, 34, 82, 82, 82, 38, 39, 40, 41, 6, 3, 6, 82, 83, 82, 82, 82, 19, 20,
    21, 22, 23, 24, 25, 19, 26, 28, 28, 29, 30, 31, 32, 33, 34, 82, 82, 82, 38, 39, 40, 41, 6, 19,
    20, 21, 22, 23, 82, 82, 82, 82, 82, 82, 29, 30, 31, 32, 33, 34, 82, 82, 82, 20, 39, 40, 41, 85,
    20, 21, 22, 23, 82, 82, 82, 82, 82, 82, 82, 82, 82, 32, 33, 34, 82, 82, 82, 82, 39, 40, 41, 85,
    21, 22, 23, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 39, 40, 41, 22, 23,
    82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 39, 40, 41, 23, 82, 82, 82, 82,
    82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 39, 40, 41, 39, 40, 40, 21, 22, 23, 82, 82, 82,
    82, 82, 82, 82, 82, 82, 32, 33, 34, 82, 82, 82, 82, 39, 40, 41, 85, 21, 22, 23, 82, 82, 82, 82,
    82, 82, 82, 82, 82, 82, 33, 34, 82, 82, 82, 82, 39, 40, 41, 85, 21, 22, 23, 82, 82, 82, 82, 82,
    82, 82, 82, 82, 82, 82, 34, 82, 82, 82, 82, 39, 40, 41, 85, 21, 22, 23, 82, 82, 82, 82, 82, 82,
    82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 39, 40, 41, 85, 20, 21, 22, 23, 82, 82, 82, 82, 82, 82,
    29, 30, 31, 32, 33, 34, 82, 82, 82, 20, 39, 40, 41, 85, 20, 21, 22, 23, 82, 82, 82, 82, 82, 82,
    82, 30, 31, 32, 33, 34, 82, 82, 82, 20, 39, 40, 41, 85, 20, 21, 22, 23, 82, 82, 82, 82, 82, 82,
    82, 82, 31, 32, 33, 34, 82, 82, 82, 20, 39, 40, 41, 85, 19, 20, 21, 22, 23, 82, 25, 19, 82, 82,
    82, 29, 30, 31, 32, 33, 34, 82, 82, 82, 20, 39, 40, 41, 85, 19, 20, 21, 22, 23, 82, 86, 19, 82,
    82, 82, 29, 30, 31, 32, 33, 34, 82, 82, 82, 20, 39, 40, 41, 85, 19, 20, 21, 22, 23, 82, 82, 19,
    82, 82, 82, 29, 30, 31, 32, 33, 34, 82, 82, 82, 20, 39, 40, 41, 85, 19, 20, 21, 22, 23, 24, 25,
    19, 82, 82, 82, 29, 30, 31, 32, 33, 34, 82, 82, 82, 20, 39, 40, 41, 85, 3, 6, 82, 83, 82, 82,
    82, 19, 20, 21, 22, 23, 24, 25, 19, 26, 82, 28, 29, 30, 31, 32, 33, 34, 82, 82, 82, 38, 39, 40,
    41, 6, 3, 82, 82, 82, 82, 82, 82, 4, 82, 82, 82, 82, 20, 21, 22, 23, 82, 82, 82, 82, 82, 82,
    82, 82, 82, 32, 33, 34, 82, 82, 82, 82, 39, 40, 41, 85, 3, 87, 87, 87, 87, 87, 87, 4, 88, 15,
    82, 82, 82, 89, 15, 6, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
    87, 87, 87, 87, 87, 87, 87, 6, 87, 87, 87, 6, 10, 82, 82, 10, 3, 6, 15, 83, 82, 82, 82, 19, 20,
    21, 22, 23, 24, 25, 19, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 82, 38, 39, 40, 41, 6, 3,
    6, 82, 83, 82, 82, 82, 19, 20, 21, 22, 23, 24, 25, 19, 26, 27, 28, 29, 30, 31, 32, 33, 34, 82,
    82, 82, 38, 39, 40, 41, 6, 35, 36, 36, 79, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
    81, 81, 81, 81, 79, 80, 10, 87, 87, 10, 0, 0,
];
static _use_syllable_machine_index_defaults: [i8; 76] = [
    0, 2, 2, 5, 5, 11, 42, 44, 44, 68, 68, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 71, 44, 44,
    44, 44, 44, 44, 44, 44, 44, 68, 44, 74, 77, 74, 44, 44, 81, 81, 82, 82, 82, 82, 82, 82, 82, 82,
    82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 87, 82, 82, 82, 87, 82, 82, 82, 82, 81,
    87, 0, 0,
];
static _use_syllable_machine_cond_targs: [i8; 92] = [
    5, 9, 5, 41, 2, 5, 1, 53, 5, 6, 7, 5, 34, 37, 63, 64, 67, 68, 72, 43, 44, 45, 46, 47, 57, 58,
    60, 69, 61, 54, 55, 56, 50, 51, 52, 70, 71, 73, 62, 48, 49, 5, 5, 5, 5, 8, 0, 33, 12, 13, 14,
    15, 16, 27, 28, 30, 31, 24, 25, 26, 19, 20, 21, 32, 17, 18, 5, 11, 5, 10, 22, 5, 23, 29, 5, 35,
    36, 5, 38, 39, 40, 5, 5, 3, 42, 4, 59, 5, 65, 66, 0, 0,
];
static _use_syllable_machine_cond_actions: [i8; 92] = [
    1, 0, 2, 3, 0, 4, 0, 5, 0, 0, 5, 8, 0, 5, 9, 0, 9, 3, 0, 5, 5, 0, 0, 0, 5, 5, 5, 3, 3, 5, 5, 5,
    5, 5, 5, 0, 0, 0, 3, 0, 0, 10, 11, 12, 13, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 14, 5, 15, 0, 0, 16, 0, 0, 17, 0, 0, 18, 5, 0, 0, 19, 20, 0, 3, 0, 5, 21, 0, 0, 0,
    0,
];
static _use_syllable_machine_to_state_actions: [i8; 76] = [
    0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];
static _use_syllable_machine_from_state_actions: [i8; 76] = [
    0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];
static _use_syllable_machine_eof_trans: [i8; 76] = [
    1, 3, 3, 6, 6, 9, 43, 45, 45, 69, 69, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 72, 45, 45,
    45, 45, 45, 45, 45, 45, 45, 69, 45, 75, 78, 75, 45, 45, 82, 82, 83, 83, 83, 83, 83, 83, 83, 83,
    83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 88, 83, 83, 83, 88, 83, 83, 83, 83, 82,
    88, 0, 0,
];
static use_syllable_machine_start: i32 = 5;
static use_syllable_machine_first_final: i32 = 5;
static use_syllable_machine_error: i32 = -1;
static use_syllable_machine_en_main: i32 = 5;
#[derive(Clone, Copy)]
pub enum SyllableType {
    IndependentCluster,
    ViramaTerminatedCluster,
    SakotTerminatedCluster,
    StandardCluster,
    NumberJoinerTerminatedCluster,
    NumeralCluster,
    SymbolCluster,
    BrokenCluster,
    NonCluster,
}

pub fn find_syllables(buffer: &mut Buffer) {
    let mut cs = 0;
    let mut ts = 0;
    let mut te = 0;
    let mut p = 0;
    let pe = buffer.len;
    let eof = buffer.len;
    let mut syllable_serial = 1u8;
    let mut act;

    macro_rules! found_syllable {
        ($kind:expr) => {{
            found_syllable(ts, te, &mut syllable_serial, $kind, buffer);
        }};
    }

    {
        cs = (use_syllable_machine_start) as i32;
        ts = 0;
        te = 0;
        act = 0;
    }

    {
        let mut _trans = 0;
        let mut _keys: i32 = 0;
        let mut _inds: i32 = 0;
        let mut _ic = 0;
        '_resume: while (p != pe || p == eof) {
            '_again: while (true) {
                match (_use_syllable_machine_from_state_actions[(cs) as usize]) {
                    7 => {
                        ts = p;
                    }

                    _ => {}
                }
                if (p == eof) {
                    {
                        if (_use_syllable_machine_eof_trans[(cs) as usize] > 0) {
                            {
                                _trans =
                                    (_use_syllable_machine_eof_trans[(cs) as usize]) as u32 - 1;
                            }
                        }
                    }
                } else {
                    {
                        _keys = (cs << 1) as i32;
                        _inds = (_use_syllable_machine_index_offsets[(cs) as usize]) as i32;
                        if ((buffer.info[p].use_category() as u8) <= 48) {
                            {
                                _ic = (_use_syllable_machine_char_class
                                    [((buffer.info[p].use_category() as u8) as i32 - 0) as usize])
                                    as i32;
                                if (_ic
                                    <= (_use_syllable_machine_trans_keys[(_keys + 1) as usize])
                                        as i32
                                    && _ic
                                        >= (_use_syllable_machine_trans_keys[(_keys) as usize])
                                            as i32)
                                {
                                    _trans = (_use_syllable_machine_indices[(_inds
                                        + (_ic
                                            - (_use_syllable_machine_trans_keys[(_keys) as usize])
                                                as i32)
                                            as i32)
                                        as usize])
                                        as u32;
                                } else {
                                    _trans = (_use_syllable_machine_index_defaults[(cs) as usize])
                                        as u32;
                                }
                            }
                        } else {
                            {
                                _trans =
                                    (_use_syllable_machine_index_defaults[(cs) as usize]) as u32;
                            }
                        }
                    }
                }
                cs = (_use_syllable_machine_cond_targs[(_trans) as usize]) as i32;
                if (_use_syllable_machine_cond_actions[(_trans) as usize] != 0) {
                    {
                        match (_use_syllable_machine_cond_actions[(_trans) as usize]) {
                            5 => {
                                te = p + 1;
                            }
                            12 => {
                                te = p + 1;
                                {
                                    found_syllable!(SyllableType::IndependentCluster);
                                }
                            }
                            14 => {
                                te = p + 1;
                                {
                                    found_syllable!(SyllableType::StandardCluster);
                                }
                            }
                            10 => {
                                te = p + 1;
                                {
                                    found_syllable!(SyllableType::BrokenCluster);
                                }
                            }
                            8 => {
                                te = p + 1;
                                {
                                    found_syllable!(SyllableType::NonCluster);
                                }
                            }
                            11 => {
                                te = p;
                                p = p - 1;
                                {
                                    found_syllable!(SyllableType::IndependentCluster);
                                }
                            }
                            15 => {
                                te = p;
                                p = p - 1;
                                {
                                    found_syllable!(SyllableType::ViramaTerminatedCluster);
                                }
                            }
                            16 => {
                                te = p;
                                p = p - 1;
                                {
                                    found_syllable!(SyllableType::SakotTerminatedCluster);
                                }
                            }
                            13 => {
                                te = p;
                                p = p - 1;
                                {
                                    found_syllable!(SyllableType::StandardCluster);
                                }
                            }
                            18 => {
                                te = p;
                                p = p - 1;
                                {
                                    found_syllable!(SyllableType::NumberJoinerTerminatedCluster);
                                }
                            }
                            17 => {
                                te = p;
                                p = p - 1;
                                {
                                    found_syllable!(SyllableType::NumeralCluster);
                                }
                            }
                            19 => {
                                te = p;
                                p = p - 1;
                                {
                                    found_syllable!(SyllableType::SymbolCluster);
                                }
                            }
                            20 => {
                                te = p;
                                p = p - 1;
                                {
                                    found_syllable!(SyllableType::BrokenCluster);
                                }
                            }
                            21 => {
                                te = p;
                                p = p - 1;
                                {
                                    found_syllable!(SyllableType::NonCluster);
                                }
                            }
                            1 => {
                                p = (te) - 1;
                                {
                                    found_syllable!(SyllableType::StandardCluster);
                                }
                            }
                            4 => {
                                p = (te) - 1;
                                {
                                    found_syllable!(SyllableType::BrokenCluster);
                                }
                            }
                            2 => match (act) {
                                8 => {
                                    p = (te) - 1;
                                    {
                                        found_syllable!(SyllableType::BrokenCluster);
                                    }
                                }
                                9 => {
                                    p = (te) - 1;
                                    {
                                        found_syllable!(SyllableType::NonCluster);
                                    }
                                }

                                _ => {}
                            },
                            3 => {
                                {
                                    {
                                        te = p + 1;
                                    }
                                }
                                {
                                    {
                                        act = 8;
                                    }
                                }
                            }
                            9 => {
                                {
                                    {
                                        te = p + 1;
                                    }
                                }
                                {
                                    {
                                        act = 9;
                                    }
                                }
                            }

                            _ => {}
                        }
                    }
                }
                break '_again;
            }
            if (p == eof) {
                {
                    if (cs >= 5) {
                        break '_resume;
                    }
                }
            } else {
                {
                    match (_use_syllable_machine_to_state_actions[(cs) as usize]) {
                        6 => {
                            ts = 0;
                        }

                        _ => {}
                    }
                    p += 1;
                    continue '_resume;
                }
            }
            break '_resume;
        }
    }
}

#[inline]
fn found_syllable(
    start: usize,
    end: usize,
    syllable_serial: &mut u8,
    kind: SyllableType,
    buffer: &mut Buffer,
) {
    for i in start..end {
        buffer.info[i].set_syllable((*syllable_serial << 4) | kind as u8);
    }

    *syllable_serial += 1;

    if *syllable_serial == 16 {
        *syllable_serial = 1;
    }
}
