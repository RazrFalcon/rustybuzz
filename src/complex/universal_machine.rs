#![allow(
    dead_code,
    non_upper_case_globals,
    unused_assignments,
    unused_parens,
    while_true,
    clippy::assign_op_pattern,
    clippy::collapsible_if,
    clippy::comparison_chain,
    clippy::double_parens,
    clippy::unnecessary_cast,
    clippy::single_match,
    clippy::never_loop
)]

use crate::buffer::Buffer;

static _use_syllable_machine_actions: [i8; 47] = [
    0, 1, 0, 1, 1, 1, 2, 1, 5, 1, 6, 1, 7, 1, 8, 1, 9, 1, 10, 1, 11, 1, 12, 1, 13, 1, 14, 1, 15, 1,
    16, 1, 17, 1, 18, 1, 19, 1, 20, 2, 2, 3, 2, 2, 4, 0, 0,
];
static _use_syllable_machine_key_offsets: [i16; 76] = [
    0, 3, 5, 6, 9, 10, 48, 49, 75, 101, 103, 104, 129, 145, 156, 162, 167, 171, 173, 174, 184, 193,
    201, 202, 209, 224, 238, 251, 269, 287, 304, 323, 347, 360, 385, 387, 388, 389, 417, 444, 446,
    447, 473, 498, 514, 525, 531, 536, 540, 542, 543, 553, 562, 570, 577, 592, 606, 619, 637, 655,
    672, 691, 715, 728, 730, 731, 733, 734, 737, 767, 792, 794, 795, 798, 0, 0,
];
static _use_syllable_machine_trans_keys: [u8; 802] = [
    12, 44, 48, 1, 15, 1, 12, 44, 48, 1, 0, 1, 3, 4, 5, 11, 12, 13, 15, 18, 19, 23, 24, 25, 26, 27,
    28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 16, 17, 22, 29, 21, 11,
    12, 15, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 38, 39, 44, 45, 46, 47, 48, 21,
    31, 11, 12, 15, 21, 23, 24, 25, 26, 27, 28, 30, 33, 34, 35, 37, 38, 39, 44, 45, 46, 47, 48, 22,
    29, 31, 32, 1, 15, 1, 11, 12, 15, 23, 24, 25, 26, 27, 28, 30, 33, 34, 35, 37, 38, 39, 44, 45,
    46, 47, 48, 22, 29, 31, 32, 22, 23, 24, 25, 26, 33, 34, 35, 37, 38, 39, 44, 45, 46, 47, 48, 23,
    24, 25, 26, 37, 38, 39, 45, 46, 47, 48, 24, 25, 26, 45, 46, 47, 25, 26, 45, 46, 47, 26, 45, 46,
    47, 45, 46, 46, 24, 25, 26, 37, 38, 39, 45, 46, 47, 48, 24, 25, 26, 38, 39, 45, 46, 47, 48, 24,
    25, 26, 39, 45, 46, 47, 48, 1, 24, 25, 26, 45, 46, 47, 48, 23, 24, 25, 26, 33, 34, 35, 37, 38,
    39, 44, 45, 46, 47, 48, 23, 24, 25, 26, 34, 35, 37, 38, 39, 44, 45, 46, 47, 48, 23, 24, 25, 26,
    35, 37, 38, 39, 44, 45, 46, 47, 48, 22, 23, 24, 25, 26, 28, 29, 33, 34, 35, 37, 38, 39, 44, 45,
    46, 47, 48, 22, 23, 24, 25, 26, 28, 29, 33, 34, 35, 37, 38, 39, 44, 45, 46, 47, 48, 22, 23, 24,
    25, 26, 29, 33, 34, 35, 37, 38, 39, 44, 45, 46, 47, 48, 23, 24, 25, 26, 27, 28, 33, 34, 35, 37,
    38, 39, 44, 45, 46, 47, 48, 22, 29, 11, 12, 15, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 37,
    38, 39, 44, 45, 46, 47, 48, 22, 29, 1, 15, 23, 24, 25, 26, 37, 38, 39, 45, 46, 47, 48, 11, 12,
    15, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 44, 45, 46, 47, 48, 22, 29, 13,
    21, 4, 13, 11, 12, 15, 21, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 41, 42,
    44, 45, 46, 47, 48, 22, 29, 11, 12, 15, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38,
    39, 41, 42, 44, 45, 46, 47, 48, 22, 29, 41, 42, 42, 11, 12, 15, 21, 23, 24, 25, 26, 27, 28, 30,
    33, 34, 35, 37, 38, 39, 44, 45, 46, 47, 48, 22, 29, 31, 32, 11, 12, 15, 23, 24, 25, 26, 27, 28,
    30, 33, 34, 35, 37, 38, 39, 44, 45, 46, 47, 48, 22, 29, 31, 32, 22, 23, 24, 25, 26, 33, 34, 35,
    37, 38, 39, 44, 45, 46, 47, 48, 23, 24, 25, 26, 37, 38, 39, 45, 46, 47, 48, 24, 25, 26, 45, 46,
    47, 25, 26, 45, 46, 47, 26, 45, 46, 47, 45, 46, 46, 24, 25, 26, 37, 38, 39, 45, 46, 47, 48, 24,
    25, 26, 38, 39, 45, 46, 47, 48, 24, 25, 26, 39, 45, 46, 47, 48, 24, 25, 26, 45, 46, 47, 48, 23,
    24, 25, 26, 33, 34, 35, 37, 38, 39, 44, 45, 46, 47, 48, 23, 24, 25, 26, 34, 35, 37, 38, 39, 44,
    45, 46, 47, 48, 23, 24, 25, 26, 35, 37, 38, 39, 44, 45, 46, 47, 48, 22, 23, 24, 25, 26, 28, 29,
    33, 34, 35, 37, 38, 39, 44, 45, 46, 47, 48, 22, 23, 24, 25, 26, 28, 29, 33, 34, 35, 37, 38, 39,
    44, 45, 46, 47, 48, 22, 23, 24, 25, 26, 29, 33, 34, 35, 37, 38, 39, 44, 45, 46, 47, 48, 23, 24,
    25, 26, 27, 28, 33, 34, 35, 37, 38, 39, 44, 45, 46, 47, 48, 22, 29, 11, 12, 15, 23, 24, 25, 26,
    27, 28, 30, 32, 33, 34, 35, 37, 38, 39, 44, 45, 46, 47, 48, 22, 29, 1, 15, 23, 24, 25, 26, 37,
    38, 39, 45, 46, 47, 48, 1, 15, 4, 13, 21, 13, 12, 44, 48, 1, 5, 11, 12, 13, 15, 23, 24, 25, 26,
    27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 22, 29, 11, 12, 15, 23,
    24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 44, 45, 46, 47, 48, 22, 29, 41, 42, 42,
    21, 41, 42, 1, 5, 0, 0,
];
static _use_syllable_machine_single_lengths: [i8; 76] = [
    3, 2, 1, 3, 1, 34, 1, 24, 22, 2, 1, 21, 16, 11, 6, 5, 4, 2, 1, 10, 9, 8, 1, 7, 15, 14, 13, 18,
    18, 17, 17, 22, 13, 23, 2, 1, 1, 26, 25, 2, 1, 22, 21, 16, 11, 6, 5, 4, 2, 1, 10, 9, 8, 7, 15,
    14, 13, 18, 18, 17, 17, 22, 13, 2, 1, 2, 1, 3, 28, 23, 2, 1, 3, 2, 0, 0,
];
static _use_syllable_machine_range_lengths: [i8; 76] = [
    0, 0, 0, 0, 0, 2, 0, 1, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,
    0, 1, 0, 0, 0, 1, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,
    0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0,
];
static _use_syllable_machine_index_offsets: [i16; 76] = [
    0, 4, 7, 9, 13, 15, 52, 54, 80, 105, 108, 110, 134, 151, 163, 170, 176, 181, 184, 186, 197,
    207, 216, 218, 226, 242, 257, 271, 290, 309, 327, 346, 370, 384, 409, 412, 414, 416, 444, 471,
    474, 476, 501, 525, 542, 554, 561, 567, 572, 575, 577, 588, 598, 607, 615, 631, 646, 660, 679,
    698, 716, 735, 759, 773, 776, 778, 781, 783, 787, 817, 842, 845, 847, 851, 0, 0,
];
static _use_syllable_machine_cond_targs: [i8; 930] = [
    9, 9, 9, 5, 41, 2, 5, 41, 5, 1, 1, 1, 5, 53, 5, 6, 7, 6, 34, 37, 41, 63, 64, 67, 68, 72, 44,
    45, 46, 47, 57, 58, 60, 69, 61, 54, 55, 56, 50, 51, 52, 70, 71, 73, 62, 48, 49, 5, 63, 6, 43,
    5, 5, 5, 8, 9, 0, 12, 13, 14, 15, 16, 27, 28, 12, 30, 31, 24, 25, 26, 19, 20, 21, 32, 17, 18,
    5, 9, 33, 5, 8, 9, 0, 11, 13, 14, 15, 16, 27, 28, 30, 24, 25, 26, 19, 20, 21, 32, 17, 18, 5, 9,
    12, 31, 5, 8, 10, 5, 8, 5, 8, 9, 0, 13, 14, 15, 16, 27, 28, 30, 24, 25, 26, 19, 20, 21, 32, 17,
    18, 5, 9, 12, 31, 5, 12, 13, 14, 15, 16, 24, 25, 26, 19, 20, 21, 13, 17, 18, 5, 22, 5, 13, 14,
    15, 16, 19, 20, 21, 17, 18, 5, 22, 5, 14, 15, 16, 17, 18, 5, 5, 15, 16, 17, 18, 5, 5, 16, 17,
    18, 5, 5, 17, 18, 5, 18, 5, 14, 15, 16, 19, 20, 21, 17, 18, 5, 22, 5, 14, 15, 16, 20, 21, 17,
    18, 5, 22, 5, 14, 15, 16, 21, 17, 18, 5, 22, 5, 23, 5, 14, 15, 16, 17, 18, 5, 22, 5, 13, 14,
    15, 16, 24, 25, 26, 19, 20, 21, 13, 17, 18, 5, 22, 5, 13, 14, 15, 16, 25, 26, 19, 20, 21, 13,
    17, 18, 5, 22, 5, 13, 14, 15, 16, 26, 19, 20, 21, 13, 17, 18, 5, 22, 5, 12, 13, 14, 15, 16, 28,
    12, 24, 25, 26, 19, 20, 21, 13, 17, 18, 5, 22, 5, 12, 13, 14, 15, 16, 29, 12, 24, 25, 26, 19,
    20, 21, 13, 17, 18, 5, 22, 5, 12, 13, 14, 15, 16, 12, 24, 25, 26, 19, 20, 21, 13, 17, 18, 5,
    22, 5, 13, 14, 15, 16, 27, 28, 24, 25, 26, 19, 20, 21, 13, 17, 18, 5, 22, 12, 5, 8, 9, 0, 13,
    14, 15, 16, 27, 28, 30, 31, 24, 25, 26, 19, 20, 21, 32, 17, 18, 5, 9, 12, 5, 8, 10, 13, 14, 15,
    16, 19, 20, 21, 17, 18, 5, 22, 5, 8, 9, 0, 13, 14, 15, 16, 27, 28, 30, 33, 31, 24, 25, 26, 19,
    20, 21, 32, 17, 18, 5, 9, 12, 5, 35, 36, 5, 34, 5, 35, 5, 8, 9, 0, 38, 13, 14, 15, 16, 27, 28,
    30, 33, 31, 24, 25, 26, 19, 20, 21, 39, 40, 32, 17, 18, 5, 9, 12, 5, 8, 9, 0, 13, 14, 15, 16,
    27, 28, 30, 33, 31, 24, 25, 26, 19, 20, 21, 39, 40, 32, 17, 18, 5, 9, 12, 5, 39, 40, 5, 40, 5,
    41, 1, 3, 42, 44, 45, 46, 47, 57, 58, 60, 54, 55, 56, 50, 51, 52, 62, 48, 49, 5, 1, 43, 61, 5,
    41, 1, 3, 44, 45, 46, 47, 57, 58, 60, 54, 55, 56, 50, 51, 52, 62, 48, 49, 5, 1, 43, 61, 5, 43,
    44, 45, 46, 47, 54, 55, 56, 50, 51, 52, 44, 48, 49, 5, 4, 5, 44, 45, 46, 47, 50, 51, 52, 48,
    49, 5, 4, 5, 45, 46, 47, 48, 49, 5, 5, 46, 47, 48, 49, 5, 5, 47, 48, 49, 5, 5, 48, 49, 5, 49,
    5, 45, 46, 47, 50, 51, 52, 48, 49, 5, 4, 5, 45, 46, 47, 51, 52, 48, 49, 5, 4, 5, 45, 46, 47,
    52, 48, 49, 5, 4, 5, 45, 46, 47, 48, 49, 5, 4, 5, 44, 45, 46, 47, 54, 55, 56, 50, 51, 52, 44,
    48, 49, 5, 4, 5, 44, 45, 46, 47, 55, 56, 50, 51, 52, 44, 48, 49, 5, 4, 5, 44, 45, 46, 47, 56,
    50, 51, 52, 44, 48, 49, 5, 4, 5, 43, 44, 45, 46, 47, 58, 43, 54, 55, 56, 50, 51, 52, 44, 48,
    49, 5, 4, 5, 43, 44, 45, 46, 47, 59, 43, 54, 55, 56, 50, 51, 52, 44, 48, 49, 5, 4, 5, 43, 44,
    45, 46, 47, 43, 54, 55, 56, 50, 51, 52, 44, 48, 49, 5, 4, 5, 44, 45, 46, 47, 57, 58, 54, 55,
    56, 50, 51, 52, 44, 48, 49, 5, 4, 43, 5, 41, 1, 3, 44, 45, 46, 47, 57, 58, 60, 61, 54, 55, 56,
    50, 51, 52, 62, 48, 49, 5, 1, 43, 5, 41, 2, 44, 45, 46, 47, 50, 51, 52, 48, 49, 5, 4, 5, 41, 2,
    5, 65, 5, 64, 66, 5, 64, 5, 1, 1, 1, 5, 7, 7, 41, 1, 64, 3, 44, 45, 46, 47, 57, 58, 60, 69, 61,
    54, 55, 56, 50, 51, 52, 70, 71, 62, 48, 49, 5, 1, 43, 5, 41, 1, 3, 44, 45, 46, 47, 57, 58, 60,
    69, 61, 54, 55, 56, 50, 51, 52, 62, 48, 49, 5, 1, 43, 5, 70, 71, 5, 71, 5, 39, 39, 40, 5, 7, 7,
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0,
];
static _use_syllable_machine_cond_actions: [i8; 930] = [
    0, 0, 0, 33, 39, 0, 37, 39, 37, 0, 0, 0, 35, 5, 35, 0, 5, 0, 0, 5, 39, 42, 0, 42, 39, 0, 5, 0,
    0, 0, 5, 5, 5, 39, 39, 5, 5, 5, 5, 5, 5, 0, 0, 0, 39, 0, 0, 11, 42, 0, 5, 13, 7, 15, 5, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 5, 21, 5, 0, 0, 5, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 5, 21, 5, 0, 17, 5, 17, 5, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 5, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0,
    21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 21, 0, 0, 0, 0, 0, 9, 21, 0, 0, 0, 0, 9, 21, 0, 0, 0, 9,
    21, 0, 0, 21, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 21, 0, 0, 0, 0, 0, 0, 0, 9, 0, 21, 0, 0, 0,
    0, 0, 0, 9, 0, 21, 0, 19, 0, 0, 0, 0, 0, 9, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0,
    21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 21, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 9, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 21, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 21, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 9, 0, 0, 21, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 17, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 21, 0, 0, 25, 0, 23, 0, 25, 5, 0, 0, 5, 0, 0, 0, 0, 0, 0,
    0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 21, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 21, 0, 0, 27, 0, 27, 39, 0, 0, 39, 5, 0, 0, 0, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 39, 0, 0, 11, 0, 5, 39, 29, 39, 0, 0, 5, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5,
    39, 0, 0, 11, 0, 5, 39, 29, 5, 5, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 0, 0, 11, 0, 29, 5, 0, 0, 0, 5,
    5, 5, 0, 0, 11, 0, 29, 0, 0, 0, 0, 0, 11, 29, 0, 0, 0, 0, 11, 29, 0, 0, 0, 11, 29, 0, 0, 29, 0,
    29, 0, 0, 0, 5, 5, 5, 0, 0, 11, 0, 29, 0, 0, 0, 5, 5, 0, 0, 11, 0, 29, 0, 0, 0, 5, 0, 0, 11, 0,
    29, 0, 0, 0, 0, 0, 11, 0, 29, 5, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 0, 0, 11, 0, 29, 5, 0, 0, 0, 5,
    5, 5, 5, 5, 5, 0, 0, 11, 0, 29, 5, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 11, 0, 29, 5, 5, 0, 0, 0, 5,
    5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 11, 0, 29, 5, 5, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 11, 0,
    29, 5, 5, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 11, 0, 29, 5, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5,
    5, 0, 0, 11, 0, 5, 29, 39, 0, 0, 5, 0, 0, 0, 5, 5, 5, 39, 5, 5, 5, 5, 5, 5, 39, 0, 0, 11, 0, 5,
    29, 39, 0, 5, 0, 0, 0, 5, 5, 5, 0, 0, 11, 0, 29, 39, 0, 31, 0, 29, 0, 0, 29, 0, 29, 0, 0, 0,
    31, 5, 5, 39, 0, 0, 0, 5, 0, 0, 0, 5, 5, 5, 39, 39, 5, 5, 5, 5, 5, 5, 0, 0, 39, 0, 0, 11, 0, 5,
    29, 39, 0, 0, 5, 0, 0, 0, 5, 5, 5, 39, 39, 5, 5, 5, 5, 5, 5, 39, 0, 0, 11, 0, 5, 29, 0, 0, 29,
    0, 29, 0, 0, 0, 27, 5, 5, 31, 33, 37, 37, 35, 35, 0, 15, 21, 21, 17, 17, 21, 21, 21, 21, 21,
    21, 21, 21, 21, 21, 21, 19, 21, 21, 21, 21, 21, 21, 21, 21, 21, 17, 21, 25, 23, 25, 21, 21, 27,
    27, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 31,
    29, 29, 29, 31, 29, 29, 29, 29, 27, 31, 0, 0,
];
static _use_syllable_machine_to_state_actions: [i8; 76] = [
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];
static _use_syllable_machine_from_state_actions: [i8; 76] = [
    0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];
static _use_syllable_machine_eof_trans: [i16; 76] = [
    855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873,
    874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892,
    893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911,
    912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 0, 0,
];
static use_syllable_machine_start: i32 = 5;
static use_syllable_machine_first_final: i32 = 5;
static use_syllable_machine_error: i32 = -1;
static use_syllable_machine_en_main: i32 = 5;
#[derive(Clone, Copy)]
pub enum SyllableType {
    IndependentCluster,
    ViramaTerminatedCluster,
    SakotTerminatedCluster,
    StandardCluster,
    NumberJoinerTerminatedCluster,
    NumeralCluster,
    SymbolCluster,
    BrokenCluster,
    NonCluster,
}

pub fn find_syllables(buffer: &mut Buffer) {
    let mut cs = 0;
    let mut ts = 0;
    let mut te = 0;
    let mut p = 0;
    let pe = buffer.len;
    let eof = buffer.len;
    let mut syllable_serial = 1u8;
    let mut act;

    macro_rules! found_syllable {
        ($kind:expr) => {{
            found_syllable(ts, te, &mut syllable_serial, $kind, buffer);
        }};
    }

    {
        cs = (use_syllable_machine_start) as i32;
        ts = 0;
        te = 0;
        act = 0;
    }

    {
        let mut _klen = 0;
        let mut _trans = 0;
        let mut _keys: i32 = 0;
        let mut _acts: i32 = 0;
        let mut _nacts = 0;
        let mut __have = 0;
        '_resume: while (p != pe || p == eof) {
            '_again: while (true) {
                _acts = (_use_syllable_machine_from_state_actions[(cs) as usize]) as i32;
                _nacts = (_use_syllable_machine_actions[(_acts) as usize]) as u32;
                _acts += 1;
                while (_nacts > 0) {
                    match (_use_syllable_machine_actions[(_acts) as usize]) {
                        1 => {
                            ts = p;
                        }

                        _ => {}
                    }
                    _nacts -= 1;
                    _acts += 1;
                }
                if (p == eof) {
                    {
                        if (_use_syllable_machine_eof_trans[(cs) as usize] > 0) {
                            {
                                _trans =
                                    (_use_syllable_machine_eof_trans[(cs) as usize]) as u32 - 1;
                            }
                        }
                    }
                } else {
                    {
                        _keys = (_use_syllable_machine_key_offsets[(cs) as usize]) as i32;
                        _trans = (_use_syllable_machine_index_offsets[(cs) as usize]) as u32;
                        _klen = (_use_syllable_machine_single_lengths[(cs) as usize]) as i32;
                        __have = 0;
                        if (_klen > 0) {
                            {
                                let mut _lower: i32 = _keys;
                                let mut _upper: i32 = _keys + _klen - 1;
                                let mut _mid: i32 = 0;
                                while (true) {
                                    if (_upper < _lower) {
                                        {
                                            _keys += _klen;
                                            _trans += (_klen) as u32;
                                            break;
                                        }
                                    }
                                    _mid = _lower + ((_upper - _lower) >> 1);
                                    if ((buffer.info[p].use_category() as u8)
                                        < _use_syllable_machine_trans_keys[(_mid) as usize])
                                    {
                                        _upper = _mid - 1;
                                    } else if ((buffer.info[p].use_category() as u8)
                                        > _use_syllable_machine_trans_keys[(_mid) as usize])
                                    {
                                        _lower = _mid + 1;
                                    } else {
                                        {
                                            __have = 1;
                                            _trans += (_mid - _keys) as u32;
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        _klen = (_use_syllable_machine_range_lengths[(cs) as usize]) as i32;
                        if (__have == 0 && _klen > 0) {
                            {
                                let mut _lower: i32 = _keys;
                                let mut _upper: i32 = _keys + (_klen << 1) - 2;
                                let mut _mid: i32 = 0;
                                while (true) {
                                    if (_upper < _lower) {
                                        {
                                            _trans += (_klen) as u32;
                                            break;
                                        }
                                    }
                                    _mid = _lower + (((_upper - _lower) >> 1) & !1);
                                    if ((buffer.info[p].use_category() as u8)
                                        < _use_syllable_machine_trans_keys[(_mid) as usize])
                                    {
                                        _upper = _mid - 2;
                                    } else if ((buffer.info[p].use_category() as u8)
                                        > _use_syllable_machine_trans_keys[(_mid + 1) as usize])
                                    {
                                        _lower = _mid + 2;
                                    } else {
                                        {
                                            _trans += ((_mid - _keys) >> 1) as u32;
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                cs = (_use_syllable_machine_cond_targs[(_trans) as usize]) as i32;
                if (_use_syllable_machine_cond_actions[(_trans) as usize] != 0) {
                    {
                        _acts = (_use_syllable_machine_cond_actions[(_trans) as usize]) as i32;
                        _nacts = (_use_syllable_machine_actions[(_acts) as usize]) as u32;
                        _acts += 1;
                        while (_nacts > 0) {
                            match (_use_syllable_machine_actions[(_acts) as usize]) {
                                2 => {
                                    te = p + 1;
                                }
                                3 => {
                                    act = 8;
                                }
                                4 => {
                                    act = 9;
                                }
                                5 => {
                                    te = p + 1;
                                    {
                                        found_syllable!(SyllableType::IndependentCluster);
                                    }
                                }
                                6 => {
                                    te = p + 1;
                                    {
                                        found_syllable!(SyllableType::StandardCluster);
                                    }
                                }
                                7 => {
                                    te = p + 1;
                                    {
                                        found_syllable!(SyllableType::BrokenCluster);
                                    }
                                }
                                8 => {
                                    te = p + 1;
                                    {
                                        found_syllable!(SyllableType::NonCluster);
                                    }
                                }
                                9 => {
                                    te = p;
                                    p = p - 1;
                                    {
                                        found_syllable!(SyllableType::IndependentCluster);
                                    }
                                }
                                10 => {
                                    te = p;
                                    p = p - 1;
                                    {
                                        found_syllable!(SyllableType::ViramaTerminatedCluster);
                                    }
                                }
                                11 => {
                                    te = p;
                                    p = p - 1;
                                    {
                                        found_syllable!(SyllableType::SakotTerminatedCluster);
                                    }
                                }
                                12 => {
                                    te = p;
                                    p = p - 1;
                                    {
                                        found_syllable!(SyllableType::StandardCluster);
                                    }
                                }
                                13 => {
                                    te = p;
                                    p = p - 1;
                                    {
                                        found_syllable!(
                                            SyllableType::NumberJoinerTerminatedCluster
                                        );
                                    }
                                }
                                14 => {
                                    te = p;
                                    p = p - 1;
                                    {
                                        found_syllable!(SyllableType::NumeralCluster);
                                    }
                                }
                                15 => {
                                    te = p;
                                    p = p - 1;
                                    {
                                        found_syllable!(SyllableType::SymbolCluster);
                                    }
                                }
                                16 => {
                                    te = p;
                                    p = p - 1;
                                    {
                                        found_syllable!(SyllableType::BrokenCluster);
                                    }
                                }
                                17 => {
                                    te = p;
                                    p = p - 1;
                                    {
                                        found_syllable!(SyllableType::NonCluster);
                                    }
                                }
                                18 => {
                                    p = (te) - 1;
                                    {
                                        found_syllable!(SyllableType::StandardCluster);
                                    }
                                }
                                19 => {
                                    p = (te) - 1;
                                    {
                                        found_syllable!(SyllableType::BrokenCluster);
                                    }
                                }
                                20 => match (act) {
                                    8 => {
                                        p = (te) - 1;
                                        {
                                            found_syllable!(SyllableType::BrokenCluster);
                                        }
                                    }
                                    9 => {
                                        p = (te) - 1;
                                        {
                                            found_syllable!(SyllableType::NonCluster);
                                        }
                                    }

                                    _ => {}
                                },

                                _ => {}
                            }
                            _nacts -= 1;
                            _acts += 1;
                        }
                    }
                }
                break '_again;
            }
            if (p == eof) {
                {
                    if (cs >= 5) {
                        break '_resume;
                    }
                }
            } else {
                {
                    _acts = (_use_syllable_machine_to_state_actions[(cs) as usize]) as i32;
                    _nacts = (_use_syllable_machine_actions[(_acts) as usize]) as u32;
                    _acts += 1;
                    while (_nacts > 0) {
                        match (_use_syllable_machine_actions[(_acts) as usize]) {
                            0 => {
                                ts = 0;
                            }

                            _ => {}
                        }
                        _nacts -= 1;
                        _acts += 1;
                    }
                    p += 1;
                    continue '_resume;
                }
            }
            break '_resume;
        }
    }
}

#[inline]
fn found_syllable(
    start: usize,
    end: usize,
    syllable_serial: &mut u8,
    kind: SyllableType,
    buffer: &mut Buffer,
) {
    for i in start..end {
        buffer.info[i].set_syllable((*syllable_serial << 4) | kind as u8);
    }

    *syllable_serial += 1;

    if *syllable_serial == 16 {
        *syllable_serial = 1;
    }
}
