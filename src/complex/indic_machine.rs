#![allow(
dead_code,
non_upper_case_globals,
unused_assignments,
unused_parens,
while_true,
clippy::assign_op_pattern,
clippy::comparison_chain,
clippy::double_parens,
clippy::unnecessary_cast,
clippy::single_match,
clippy::never_loop
)]

use crate::buffer::Buffer;

static _indic_syllable_machine_actions: [i8 ; 44] = [ 0, 1, 0, 1, 1, 1, 2, 1, 6, 1, 7, 1, 8, 1, 9, 1, 10, 1, 11, 1, 12, 1, 13, 1, 14, 1, 15, 1, 16, 1, 17, 1, 18, 2, 2, 3, 2, 2, 4, 2, 2, 5, 0 , 0 ];
static _indic_syllable_machine_key_offsets: [i16 ; 143] = [ 0, 1, 6, 9, 13, 18, 19, 20, 25, 31, 36, 37, 40, 44, 49, 50, 51, 56, 62, 68, 74, 75, 78, 82, 87, 88, 89, 94, 99, 105, 106, 109, 113, 118, 119, 120, 125, 130, 134, 135, 152, 161, 169, 176, 182, 186, 189, 190, 192, 199, 205, 211, 218, 224, 229, 235, 239, 244, 248, 256, 265, 274, 282, 289, 295, 304, 312, 319, 325, 328, 329, 331, 338, 344, 351, 357, 362, 368, 372, 376, 381, 385, 393, 402, 407, 415, 423, 430, 436, 445, 451, 454, 455, 457, 464, 470, 477, 483, 488, 496, 502, 506, 510, 515, 519, 528, 534, 539, 548, 556, 563, 569, 578, 584, 587, 588, 590, 597, 603, 610, 616, 621, 629, 635, 639, 643, 648, 652, 666, 675, 688, 695, 698, 699, 701, 710, 715, 719, 722, 723, 725, 0 , 0 ];
static _indic_syllable_machine_trans_keys: [u8 ; 730] = [ 8, 4, 7, 8, 5, 6, 7, 5, 6, 7, 8, 5, 6, 4, 7, 8, 5, 6, 6, 16, 4, 7, 8, 5, 6, 4, 7, 8, 13, 5, 6, 4, 7, 8, 5, 6, 8, 7, 5, 6, 7, 8, 5, 6, 4, 7, 8, 5, 6, 6, 16, 4, 7, 8, 5, 6, 4, 7, 8, 13, 5, 6, 4, 7, 8, 13, 5, 6, 4, 7, 8, 13, 5, 6, 8, 7, 5, 6, 7, 8, 5, 6, 4, 7, 8, 5, 6, 6, 16, 4, 7, 8, 5, 6, 4, 7, 8, 5, 6, 4, 7, 8, 13, 5, 6, 8, 7, 5, 6, 7, 8, 5, 6, 4, 7, 8, 5, 6, 6, 16, 4, 7, 8, 5, 6, 4, 7, 8, 5, 6, 7, 8, 5, 6, 8, 1, 2, 3, 4, 5, 6, 7, 8, 10, 13, 15, 16, 17, 18, 19, 11, 12, 3, 4, 5, 6, 7, 8, 10, 13, 17, 3, 4, 7, 8, 10, 17, 5, 6, 4, 7, 8, 10, 17, 5, 6, 1, 5, 6, 8, 10, 16, 8, 10, 5, 6, 5, 8, 10, 10, 5, 10, 1, 3, 8, 10, 16, 5, 6, 1, 8, 10, 16, 5, 6, 1, 5, 6, 8, 10, 16, 3, 4, 5, 6, 7, 8, 10, 4, 5, 6, 7, 8, 10, 7, 8, 10, 5, 6, 4, 7, 8, 10, 5, 6, 5, 6, 8, 10, 3, 8, 10, 5, 6, 5, 6, 8, 10, 3, 4, 7, 8, 10, 17, 5, 6, 3, 4, 5, 6, 7, 8, 10, 13, 17, 3, 4, 5, 6, 7, 8, 10, 13, 17, 3, 4, 5, 6, 7, 8, 10, 17, 4, 5, 6, 7, 8, 10, 17, 1, 5, 6, 8, 10, 16, 3, 4, 5, 6, 7, 8, 10, 13, 17, 3, 4, 7, 8, 10, 17, 5, 6, 4, 7, 8, 10, 17, 5, 6, 1, 5, 6, 8, 10, 16, 5, 8, 10, 10, 5, 10, 1, 3, 8, 10, 16, 5, 6, 1, 8, 10, 16, 5, 6, 3, 4, 5, 6, 7, 8, 10, 4, 5, 6, 7, 8, 10, 7, 8, 10, 5, 6, 4, 7, 8, 10, 5, 6, 5, 6, 8, 10, 8, 10, 5, 6, 3, 8, 10, 5, 6, 5, 6, 8, 10, 3, 4, 7, 8, 10, 17, 5, 6, 3, 4, 5, 6, 7, 8, 10, 13, 17, 4, 7, 8, 5, 6, 3, 4, 5, 6, 7, 8, 10, 17, 3, 4, 7, 8, 10, 17, 5, 6, 4, 7, 8, 10, 17, 5, 6, 1, 5, 6, 8, 10, 16, 3, 4, 5, 6, 7, 8, 10, 13, 17, 1, 5, 6, 8, 10, 16, 5, 8, 10, 10, 5, 10, 1, 3, 8, 10, 16, 5, 6, 1, 8, 10, 16, 5, 6, 3, 4, 5, 6, 7, 8, 10, 4, 5, 6, 7, 8, 10, 7, 8, 10, 5, 6, 3, 4, 7, 8, 10, 17, 5, 6, 4, 7, 8, 10, 5, 6, 5, 6, 8, 10, 8, 10, 5, 6, 3, 8, 10, 5, 6, 5, 6, 8, 10, 3, 4, 5, 6, 7, 8, 10, 13, 17, 4, 7, 8, 13, 5, 6, 4, 7, 8, 5, 6, 3, 4, 5, 6, 7, 8, 10, 13, 17, 3, 4, 7, 8, 10, 17, 5, 6, 4, 7, 8, 10, 17, 5, 6, 1, 5, 6, 8, 10, 16, 3, 4, 5, 6, 7, 8, 10, 13, 17, 1, 5, 6, 8, 10, 16, 5, 8, 10, 10, 5, 10, 1, 3, 8, 10, 16, 5, 6, 1, 8, 10, 16, 5, 6, 3, 4, 5, 6, 7, 8, 10, 4, 5, 6, 7, 8, 10, 7, 8, 10, 5, 6, 3, 4, 7, 8, 10, 17, 5, 6, 4, 7, 8, 10, 5, 6, 5, 6, 8, 10, 8, 10, 5, 6, 3, 8, 10, 5, 6, 5, 6, 8, 10, 1, 2, 3, 4, 5, 6, 7, 8, 10, 13, 16, 17, 11, 12, 3, 4, 5, 6, 7, 8, 10, 13, 17, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 16, 17, 4, 7, 8, 10, 13, 5, 6, 5, 8, 10, 10, 5, 10, 1, 3, 4, 7, 8, 10, 16, 5, 6, 3, 8, 10, 5, 6, 8, 10, 5, 6, 5, 8, 10, 10, 5, 10, 1, 11, 16, 0, 0 ];
static _indic_syllable_machine_single_lengths: [i8 ; 143] = [ 1, 3, 1, 2, 3, 1, 1, 3, 4, 3, 1, 1, 2, 3, 1, 1, 3, 4, 4, 4, 1, 1, 2, 3, 1, 1, 3, 3, 4, 1, 1, 2, 3, 1, 1, 3, 3, 2, 1, 15, 9, 6, 5, 6, 2, 3, 1, 2, 5, 4, 6, 7, 6, 3, 4, 4, 3, 4, 6, 9, 9, 8, 7, 6, 9, 6, 5, 6, 3, 1, 2, 5, 4, 7, 6, 3, 4, 4, 2, 3, 4, 6, 9, 3, 8, 6, 5, 6, 9, 6, 3, 1, 2, 5, 4, 7, 6, 3, 6, 4, 4, 2, 3, 4, 9, 4, 3, 9, 6, 5, 6, 9, 6, 3, 1, 2, 5, 4, 7, 6, 3, 6, 4, 4, 2, 3, 4, 12, 9, 13, 5, 3, 1, 2, 7, 3, 2, 3, 1, 2, 3, 0 , 0 ];
static _indic_syllable_machine_range_lengths: [i8 ; 143] = [ 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0 , 0 ];
static _indic_syllable_machine_index_offsets: [i16 ; 143] = [ 0, 2, 7, 10, 14, 19, 21, 23, 28, 34, 39, 41, 44, 48, 53, 55, 57, 62, 68, 74, 80, 82, 85, 89, 94, 96, 98, 103, 108, 114, 116, 119, 123, 128, 130, 132, 137, 142, 146, 148, 165, 175, 183, 190, 197, 201, 205, 207, 210, 217, 223, 230, 238, 245, 250, 256, 261, 266, 271, 279, 289, 299, 308, 316, 323, 333, 341, 348, 355, 359, 361, 364, 371, 377, 385, 392, 397, 403, 408, 412, 417, 422, 430, 440, 445, 454, 462, 469, 476, 486, 493, 497, 499, 502, 509, 515, 523, 530, 535, 543, 549, 554, 558, 563, 568, 578, 584, 589, 599, 607, 614, 621, 631, 638, 642, 644, 647, 654, 660, 668, 675, 680, 688, 694, 699, 703, 708, 713, 727, 737, 751, 758, 762, 764, 767, 776, 781, 785, 789, 791, 794, 0 , 0 ];
static _indic_syllable_machine_cond_targs: [i16 ; 941] = [ 45, 39, 50, 51, 45, 2, 39, 51, 2, 39, 51, 45, 2, 39, 5, 51, 45, 2, 39, 6, 39, 53, 39, 57, 51, 45, 2, 39, 50, 51, 45, 58, 2, 39, 67, 73, 68, 11, 39, 68, 39, 73, 11, 39, 73, 68, 11, 39, 14, 73, 68, 11, 39, 15, 39, 75, 39, 80, 73, 68, 11, 39, 67, 73, 68, 81, 11, 39, 67, 73, 68, 84, 11, 39, 89, 95, 90, 98, 21, 39, 90, 39, 95, 21, 39, 95, 90, 21, 39, 24, 95, 90, 21, 39, 25, 39, 97, 39, 89, 95, 90, 21, 39, 103, 95, 90, 21, 39, 112, 118, 113, 121, 30, 39, 113, 39, 118, 30, 39, 118, 113, 30, 39, 33, 118, 113, 30, 39, 34, 39, 120, 39, 112, 118, 113, 30, 39, 126, 118, 113, 30, 39, 95, 45, 21, 39, 137, 39, 40, 60, 85, 87, 105, 106, 95, 90, 91, 98, 127, 128, 99, 135, 140, 107, 39, 41, 43, 8, 59, 51, 45, 46, 58, 54, 39, 42, 43, 51, 45, 46, 54, 1, 39, 43, 51, 45, 46, 54, 1, 39, 40, 44, 48, 45, 46, 40, 39, 45, 46, 0, 39, 46, 47, 46, 39, 46, 39, 46, 46, 39, 40, 49, 45, 46, 40, 0, 39, 40, 45, 46, 40, 0, 39, 40, 0, 48, 45, 46, 40, 39, 52, 53, 3, 4, 51, 45, 46, 39, 53, 3, 4, 51, 45, 46, 39, 51, 45, 46, 3, 39, 55, 51, 45, 46, 7, 39, 44, 56, 45, 46, 39, 44, 45, 46, 0, 39, 0, 56, 45, 46, 39, 41, 43, 51, 45, 46, 54, 1, 39, 41, 43, 8, 1, 51, 45, 46, 58, 54, 39, 61, 63, 18, 83, 73, 68, 69, 84, 76, 39, 62, 63, 9, 83, 73, 68, 69, 76, 39, 63, 9, 83, 73, 68, 69, 76, 39, 64, 78, 71, 68, 69, 64, 39, 65, 63, 17, 82, 73, 68, 69, 81, 76, 39, 66, 63, 73, 68, 69, 76, 9, 39, 63, 73, 68, 69, 76, 9, 39, 64, 10, 71, 68, 69, 64, 39, 69, 70, 69, 39, 69, 39, 69, 69, 39, 64, 72, 68, 69, 64, 10, 39, 64, 68, 69, 64, 10, 39, 74, 75, 12, 13, 73, 68, 69, 39, 75, 12, 13, 73, 68, 69, 39, 73, 68, 69, 12, 39, 77, 73, 68, 69, 16, 39, 78, 79, 68, 69, 39, 68, 69, 10, 39, 78, 68, 69, 10, 39, 10, 79, 68, 69, 39, 65, 63, 73, 68, 69, 76, 9, 39, 65, 63, 17, 9, 73, 68, 69, 81, 76, 39, 67, 73, 68, 11, 39, 61, 63, 9, 83, 73, 68, 69, 76, 39, 86, 87, 95, 90, 91, 99, 26, 39, 87, 95, 90, 91, 99, 26, 39, 88, 101, 93, 90, 91, 88, 39, 85, 87, 19, 104, 95, 90, 91, 98, 99, 39, 88, 20, 93, 90, 91, 88, 39, 91, 92, 91, 39, 91, 39, 91, 91, 39, 88, 94, 90, 91, 88, 20, 39, 88, 90, 91, 88, 20, 39, 96, 97, 22, 23, 95, 90, 91, 39, 97, 22, 23, 95, 90, 91, 39, 95, 90, 91, 22, 39, 85, 87, 95, 90, 91, 99, 26, 39, 100, 95, 90, 91, 27, 39, 101, 102, 90, 91, 39, 90, 91, 20, 39, 101, 90, 91, 20, 39, 20, 102, 90, 91, 39, 85, 87, 19, 26, 95, 90, 91, 98, 99, 39, 89, 95, 90, 98, 21, 39, 89, 95, 90, 21, 39, 108, 110, 28, 35, 118, 113, 114, 121, 122, 39, 109, 110, 118, 113, 114, 122, 35, 39, 110, 118, 113, 114, 122, 35, 39, 111, 124, 116, 113, 114, 111, 39, 108, 110, 28, 107, 118, 113, 114, 121, 122, 39, 111, 29, 116, 113, 114, 111, 39, 114, 115, 114, 39, 114, 39, 114, 114, 39, 111, 117, 113, 114, 111, 29, 39, 111, 113, 114, 111, 29, 39, 119, 120, 31, 32, 118, 113, 114, 39, 120, 31, 32, 118, 113, 114, 39, 118, 113, 114, 31, 39, 108, 110, 118, 113, 114, 122, 35, 39, 123, 118, 113, 114, 36, 39, 124, 125, 113, 114, 39, 113, 114, 29, 39, 124, 113, 114, 29, 39, 29, 125, 113, 114, 39, 40, 60, 85, 87, 19, 26, 95, 90, 91, 98, 40, 99, 107, 39, 41, 129, 8, 59, 51, 45, 46, 58, 54, 39, 40, 60, 85, 87, 130, 134, 95, 131, 132, 107, 98, 40, 99, 39, 89, 95, 131, 46, 98, 37, 39, 132, 133, 132, 39, 132, 39, 132, 132, 39, 40, 49, 89, 95, 131, 46, 40, 37, 39, 136, 137, 138, 38, 39, 137, 138, 38, 39, 138, 139, 138, 39, 138, 39, 138, 138, 39, 40, 107, 40, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 0 , 0 ];
static _indic_syllable_machine_cond_actions: [i8 ; 941] = [ 0, 21, 5, 5, 0, 0, 21, 5, 0, 21, 5, 0, 0, 21, 0, 5, 0, 0, 21, 0, 21, 5, 21, 5, 5, 0, 0, 21, 5, 5, 0, 5, 0, 21, 5, 5, 0, 0, 23, 0, 23, 5, 0, 23, 5, 0, 0, 23, 0, 5, 0, 0, 23, 0, 23, 5, 23, 5, 5, 0, 0, 23, 5, 5, 0, 5, 0, 23, 5, 5, 0, 5, 0, 23, 5, 36, 0, 36, 0, 29, 0, 29, 36, 0, 31, 36, 0, 0, 29, 0, 36, 0, 0, 29, 0, 29, 36, 29, 5, 36, 0, 0, 29, 5, 36, 0, 0, 29, 5, 5, 0, 5, 0, 25, 0, 25, 5, 0, 25, 5, 0, 0, 25, 0, 5, 0, 0, 25, 0, 25, 5, 25, 5, 5, 0, 0, 25, 5, 5, 0, 0, 25, 36, 0, 0, 21, 0, 27, 5, 5, 36, 0, 39, 39, 36, 0, 0, 36, 36, 5, 36, 5, 0, 5, 7, 5, 0, 0, 5, 5, 0, 0, 5, 5, 9, 5, 0, 5, 0, 0, 5, 0, 9, 0, 5, 0, 0, 5, 0, 9, 5, 5, 5, 0, 0, 5, 9, 0, 0, 0, 9, 0, 0, 0, 9, 0, 9, 0, 0, 9, 5, 5, 0, 0, 5, 0, 9, 5, 0, 0, 5, 0, 9, 5, 0, 5, 0, 0, 5, 9, 5, 5, 0, 0, 5, 0, 0, 9, 5, 0, 0, 5, 0, 0, 9, 5, 0, 0, 0, 9, 0, 5, 0, 0, 0, 9, 5, 5, 0, 0, 9, 5, 0, 0, 0, 9, 0, 5, 0, 0, 9, 5, 0, 5, 0, 0, 5, 0, 9, 5, 0, 0, 0, 5, 0, 0, 5, 5, 9, 5, 0, 0, 5, 5, 0, 0, 5, 5, 11, 5, 0, 0, 5, 5, 0, 0, 5, 11, 0, 0, 5, 5, 0, 0, 5, 11, 5, 5, 5, 0, 0, 5, 11, 5, 0, 0, 5, 5, 0, 0, 5, 5, 11, 5, 0, 5, 0, 0, 5, 0, 11, 0, 5, 0, 0, 5, 0, 11, 5, 0, 5, 0, 0, 5, 11, 0, 0, 0, 11, 0, 11, 0, 0, 11, 5, 5, 0, 0, 5, 0, 11, 5, 0, 0, 5, 0, 11, 5, 5, 0, 0, 5, 0, 0, 11, 5, 0, 0, 5, 0, 0, 11, 5, 0, 0, 0, 11, 0, 5, 0, 0, 0, 11, 5, 5, 0, 0, 11, 0, 0, 0, 11, 5, 0, 0, 0, 11, 0, 5, 0, 0, 11, 5, 0, 5, 0, 0, 5, 0, 11, 5, 0, 0, 0, 5, 0, 0, 5, 5, 11, 5, 5, 0, 0, 11, 5, 0, 0, 5, 5, 0, 0, 5, 11, 36, 0, 36, 0, 0, 36, 0, 17, 0, 36, 0, 0, 36, 0, 17, 36, 5, 5, 0, 0, 36, 17, 36, 0, 0, 36, 36, 0, 0, 36, 36, 17, 36, 0, 5, 0, 0, 36, 17, 0, 0, 0, 17, 0, 17, 0, 0, 17, 36, 5, 0, 0, 36, 0, 17, 36, 0, 0, 36, 0, 17, 36, 36, 0, 0, 36, 0, 0, 17, 36, 0, 0, 36, 0, 0, 17, 36, 0, 0, 0, 17, 36, 0, 36, 0, 0, 36, 0, 17, 0, 36, 0, 0, 0, 17, 5, 5, 0, 0, 17, 0, 0, 0, 17, 5, 0, 0, 0, 17, 0, 5, 0, 0, 17, 36, 0, 0, 0, 36, 0, 0, 36, 36, 17, 5, 36, 0, 36, 0, 19, 5, 36, 0, 0, 19, 5, 0, 0, 0, 5, 0, 0, 5, 5, 13, 5, 0, 5, 0, 0, 5, 0, 13, 0, 5, 0, 0, 5, 0, 13, 5, 5, 5, 0, 0, 5, 13, 5, 0, 0, 5, 5, 0, 0, 5, 5, 13, 5, 0, 5, 0, 0, 5, 13, 0, 0, 0, 13, 0, 13, 0, 0, 13, 5, 5, 0, 0, 5, 0, 13, 5, 0, 0, 5, 0, 13, 5, 5, 0, 0, 5, 0, 0, 13, 5, 0, 0, 5, 0, 0, 13, 5, 0, 0, 0, 13, 5, 0, 5, 0, 0, 5, 0, 13, 0, 5, 0, 0, 0, 13, 5, 5, 0, 0, 13, 0, 0, 0, 13, 5, 0, 0, 0, 13, 0, 5, 0, 0, 13, 5, 5, 36, 0, 0, 0, 36, 0, 0, 36, 5, 36, 5, 17, 5, 0, 0, 5, 5, 0, 0, 5, 5, 9, 5, 5, 36, 0, 33, 33, 36, 0, 0, 5, 36, 5, 36, 9, 5, 36, 0, 0, 36, 0, 9, 0, 0, 0, 9, 0, 9, 0, 0, 9, 5, 5, 5, 36, 0, 0, 5, 0, 9, 5, 0, 0, 0, 15, 0, 0, 0, 15, 0, 0, 0, 15, 0, 15, 0, 0, 15, 5, 5, 5, 19, 21, 21, 21, 21, 21, 21, 21, 21, 21, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 29, 29, 31, 29, 29, 29, 29, 29, 29, 25, 25, 25, 25, 25, 25, 25, 25, 25, 21, 27, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 19, 19, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 17, 9, 9, 9, 9, 9, 9, 9, 15, 15, 15, 15, 15, 19, 0 , 0 ];
static _indic_syllable_machine_to_state_actions: [i8 ; 143] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 ];
static _indic_syllable_machine_from_state_actions: [i8 ; 143] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 ];
static _indic_syllable_machine_eof_trans: [i16 ; 143] = [ 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 0 , 0 ];
static indic_syllable_machine_start : i32 = 39;
static indic_syllable_machine_first_final : i32 = 39;
static indic_syllable_machine_error : i32 = -1;
static indic_syllable_machine_en_main : i32 = 39;
#[derive(Clone, Copy)]
pub enum SyllableType {
	ConsonantSyllable = 0,
	VowelSyllable,
	StandaloneCluster,
	SymbolCluster,
	BrokenCluster,
	NonIndicCluster,
}

pub fn find_syllables_indic(buffer: &mut Buffer) {
	let mut cs = 0;
	let mut ts = 0;
	let mut te = 0;
	let mut act = 0;
	let mut p = 0;
	let pe = buffer.len;
	let eof = buffer.len;
	let mut syllable_serial = 1u8;
	
	macro_rules! found_syllable {
		($kind:expr) => {{
				found_syllable(ts, ts, &mut syllable_serial, $kind, buffer)
			}}
	}
	
	
	{
		cs = ( indic_syllable_machine_start ) as i32;
		ts = 0;
		te = 0;
		act = 0;
	}
	
	{
		let mut _klen = 0;
		let mut _trans  = 0;
		let mut _keys :i32= 0;
		let mut _acts :i32= 0;
		let mut _nacts = 0;
		let mut __have = 0;
		'_resume: while ( p != pe || p == eof  ) {
			'_again: while ( true  ) {
				_acts = ( _indic_syllable_machine_from_state_actions[(cs) as usize] ) as i32;
				_nacts = ( _indic_syllable_machine_actions[(_acts ) as usize]
				) as u32;
				_acts += 1;
				while ( _nacts > 0  ) {
					match ( _indic_syllable_machine_actions[(_acts ) as usize]
					) {
						1  => {
							{{ts = p;
								}}
							
						}
						
						_ => {}
					}
					_nacts -= 1;
					_acts += 1;
					
				}
				if ( p == eof  ) {
					{
						if ( _indic_syllable_machine_eof_trans[(cs) as usize]> 0  ) {
							{
								_trans = ( _indic_syllable_machine_eof_trans[(cs) as usize] ) as u32- 1;
							}
							
						}
					}
					
				}
				else {
					{
						_keys = ( _indic_syllable_machine_key_offsets[(cs) as usize] ) as i32;
						_trans = ( _indic_syllable_machine_index_offsets[(cs) as usize] ) as u32;
						_klen = ( _indic_syllable_machine_single_lengths[(cs) as usize] ) as i32;
						__have = 0;
						if ( _klen > 0  ) {
							{
								let mut _lower  :i32= _keys;
								let mut _upper  :i32= _keys + _klen - 1;
								let mut _mid :i32= 0;
								while ( true  ) {
									if ( _upper < _lower  ) {
										{
											_keys += _klen;
											_trans += ( _klen ) as u32;
											break;
										}
										
										
									}
									_mid = _lower + ((_upper-_lower) >> 1);
									if ( ((buffer.info[p].indic_category() as u8)) < _indic_syllable_machine_trans_keys[(_mid ) as usize]
									) {
										_upper = _mid - 1;
										
									}
									else if ( ((buffer.info[p].indic_category() as u8)) > _indic_syllable_machine_trans_keys[(_mid ) as usize]
									) {
										_lower = _mid + 1;
										
									}
									else {
										{
											__have = 1;
											_trans += ( (_mid - _keys) ) as u32;
											break;
										}
										
									}
									
								}
							}
							
							
						}
						_klen = ( _indic_syllable_machine_range_lengths[(cs) as usize] ) as i32;
						if ( __have == 0 && _klen > 0  ) {
							{
								let mut _lower  :i32= _keys;
								let mut _upper  :i32= _keys + (_klen<<1) - 2;
								let mut _mid :i32= 0;
								while ( true  ) {
									if ( _upper < _lower  ) {
										{
											_trans += ( _klen ) as u32;
											break;
										}
										
										
									}
									_mid = _lower + (((_upper-_lower) >> 1) & !1
									);
									if ( ((buffer.info[p].indic_category() as u8)) < _indic_syllable_machine_trans_keys[(_mid ) as usize]
									) {
										_upper = _mid - 2;
										
									}
									else if ( ((buffer.info[p].indic_category() as u8)) > _indic_syllable_machine_trans_keys[(_mid + 1 ) as usize]
									) {
										_lower = _mid + 2;
										
									}
									else {
										{
											_trans += ( ((_mid - _keys)>>1) ) as u32;
											break;
										}
										
									}
									
								}
							}
							
							
						}
					}
					
				}
				cs = ( _indic_syllable_machine_cond_targs[(_trans) as usize] ) as i32;
				if ( _indic_syllable_machine_cond_actions[(_trans) as usize]!= 0  ) {
					{
					
						_acts = ( _indic_syllable_machine_cond_actions[(_trans) as usize] ) as i32;
						_nacts = ( _indic_syllable_machine_actions[(_acts ) as usize]
						) as u32;
						_acts += 1;
						while ( _nacts > 0  ) {
							match ( _indic_syllable_machine_actions[(_acts ) as usize]
							) {
								2  => {
									{{te = p+1;
										}}
									
								}
								3  => {
									{{act = 1;
										}}
									
								}
								4  => {
									{{act = 5;
										}}
									
								}
								5  => {
									{{act = 6;
										}}
									
								}
								6  => {
									{{te = p+1;
											{found_syllable!(SyllableType::NonIndicCluster); }
										}}
									
								}
								7  => {
									{{te = p;
											p = p - 1;
											{found_syllable!(SyllableType::ConsonantSyllable); }
										}}
									
								}
								8  => {
									{{te = p;
											p = p - 1;
											{found_syllable!(SyllableType::VowelSyllable); }
										}}
									
								}
								9  => {
									{{te = p;
											p = p - 1;
											{found_syllable!(SyllableType::StandaloneCluster); }
										}}
									
								}
								10  => {
									{{te = p;
											p = p - 1;
											{found_syllable!(SyllableType::SymbolCluster); }
										}}
									
								}
								11  => {
									{{te = p;
											p = p - 1;
											{found_syllable!(SyllableType::BrokenCluster); /*buffer->scratch_flags |= HB_BUFFER_SCRATCH_FLAG_HAS_BROKEN_SYLLABLE;*/ }
										}}
									
								}
								12  => {
									{{te = p;
											p = p - 1;
											{found_syllable!(SyllableType::NonIndicCluster); }
										}}
									
								}
								13  => {
									{{p = ((te))-1;
											{found_syllable!(SyllableType::ConsonantSyllable); }
										}}
									
								}
								14  => {
									{{p = ((te))-1;
											{found_syllable!(SyllableType::VowelSyllable); }
										}}
									
								}
								15  => {
									{{p = ((te))-1;
											{found_syllable!(SyllableType::StandaloneCluster); }
										}}
									
								}
								16  => {
									{{p = ((te))-1;
											{found_syllable!(SyllableType::SymbolCluster); }
										}}
									
								}
								17  => {
									{{p = ((te))-1;
											{found_syllable!(SyllableType::BrokenCluster); /*buffer->scratch_flags |= HB_BUFFER_SCRATCH_FLAG_HAS_BROKEN_SYLLABLE;*/ }
										}}
									
								}
								18  => {
									{{match ( act  ) {
												1  => {
													p = ((te))-1;
													{found_syllable!(SyllableType::ConsonantSyllable); }
													
												}
												5  => {
													p = ((te))-1;
													{found_syllable!(SyllableType::BrokenCluster); /*buffer->scratch_flags |= HB_BUFFER_SCRATCH_FLAG_HAS_BROKEN_SYLLABLE;*/ }
													
												}
												6  => {
													p = ((te))-1;
													{found_syllable!(SyllableType::NonIndicCluster); }
													
												}
												
												_ => {}
											}
										}
									}
									
								}
								
								_ => {}
							}
							_nacts -= 1;
							_acts += 1;
							
						}
					}
					
				}
				break '_again;
				
			}
			if ( p == eof  ) {
				{
					if ( cs >= 39  ) {
						break '_resume;
						
					}
				}
				
			}
			else {
				{
					_acts = ( _indic_syllable_machine_to_state_actions[(cs) as usize] ) as i32;
					_nacts = ( _indic_syllable_machine_actions[(_acts ) as usize]
					) as u32;
					_acts += 1;
					while ( _nacts > 0  ) {
						match ( _indic_syllable_machine_actions[(_acts ) as usize]
						) {
							0  => {
								{{ts = 0;
									}}
								
							}
							
							_ => {}
						}
						_nacts -= 1;
						_acts += 1;
						
					}
					p += 1;
					continue '_resume;
				}
				
			}
			break '_resume;
			
		}
	}
}

#[inline]
fn found_syllable(
start: usize,
end: usize,
syllable_serial: &mut u8,
kind: SyllableType,
buffer: &mut Buffer,
) {
	for i in start..end {
		buffer.info[i].set_syllable((*syllable_serial << 4) | kind as u8);
	}
	
	*syllable_serial += 1;
	
	if *syllable_serial == 16 {
		*syllable_serial = 1;
	}
}
